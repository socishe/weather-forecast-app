{"version":3,"sources":["components/WeatherDetails.js","components/WeatherList.js","components/SearchForm.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDetails","data","units","className","date","undefined","low","high","src","weather","icon","alt","desciption","temp","WeatherList","props","error","length","map","key","SearchForm","state","city","onFormSubmit","event","preventDefault","onSubmit","this","type","placeholder","value","onChange","e","setState","target","Component","API_KEY","WeatherCard","useState","tempUnits","tempSymbol","main","mainTemp","timezone","min","max","currentWeather","setCurrentWeather","setWeather","showRetry","setShowRetry","setError","retrying","setRetrying","remainingTime","setRemainingTime","useEffect","keepCalling","URL","axios","get","then","response","time","Math","round","temp_min","temp_max","setTimeout","catch","makeCall","Promise","resolve","reject","cod","arr","list","filter","val","dt_txt","split","matching","forEach","push","toArray","Object","entries","finalData","itemData","itemValue","roundTemp","dataCons","loopCall","useCallback","apiCaller","delay","a","console","log","timer","clearTimeout","converter","celsius","fahrenheit","onValueChange","symbol","calCurrent","changeWeather","objValue","htmlFor","id","checked","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c8359b36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./WeatherDetails.css\";\r\n\r\nconst WeatherDetails = ({ data, units }) => {\r\n  return (\r\n    <div className=\"main-display\">\r\n      <h1 className=\"date\">{data.date}</h1>\r\n      <div className=\"weather-image\">\r\n        {data.data.low !== undefined && data.data.high === undefined ? (\r\n          <>\r\n            \r\n            <img\r\n              src={`http://openweathermap.org/img/w/${data.data.low.weather.icon}.png`}\r\n              alt={data.data.low.weather.desciption}\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <img\r\n              src={`http://openweathermap.org/img/w/${data.data.high.weather.icon}.png`}\r\n              alt={data.data.high.weather.desciption}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"temeratures\">\r\n        {data.data.low !== undefined && (\r\n          <>Min: {`${data.data.low.temp} ${units}`}</>\r\n        )}\r\n      </div>\r\n      <div className=\"temeratures\">\r\n        {data.data.high !== undefined && (\r\n          <>Max: {`${data.data.high.temp} ${units}`}</>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React from \"react\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\n\r\nconst WeatherList = (props) => {\r\n  const { weather, units, error } = props;\r\n\r\n  return (\r\n    <>\r\n      {weather.length === 0 ? (\r\n        <div>{!error ? \"Loading!\" : \"Failed to load\"}</div>\r\n      ) : (\r\n        <div className=\"list-group\">\r\n          {weather.map((data) => {\r\n            return <WeatherDetails data={data} key={data.date} units={units} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import React, { Component } from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\nclass SearchForm extends Component {\r\n  state = {\r\n    city: \"Cape Town\",\r\n  };\r\n\r\n  onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.city);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inline-input\">\r\n        <form onSubmit={this.onFormSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search for a place\"\r\n            value={this.state.city}\r\n            onChange={(e) => this.setState({ city: e.target.value })}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchForm;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./WeatherCard.css\";\r\nimport WeatherList from \"./WeatherList\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport axios from \"axios\";\r\n\r\n// import data from \"../JsonData\";\r\nconst API_KEY = \"87c4d0766e312391d63eb4c67ad58131\";\r\n\r\nconst WeatherCard = () => {\r\n  const [state, setState] = useState({\r\n    city: \"Cape Town\",\r\n    tempUnits: \"celsius\",\r\n    tempSymbol: \"°C\",\r\n  });\r\n\r\n  const [currentWeather, setCurrentWeather] = useState({\r\n    icon: \"\",\r\n    main: \"\",\r\n    mainTemp: 0,\r\n    timezone: \"\",\r\n    temp: {\r\n      min: 0,\r\n      max: 0,\r\n    },\r\n  });\r\n\r\n  const [weather, setWeather] = useState([]);\r\n\r\n  const [showRetry, setShowRetry] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [retrying, setRetrying] = useState(false);\r\n  const [remainingTime, setRemainingTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const keepCalling = () => {\r\n      const URL = `https://api.openweathermap.org/data/2.5/weather?q=${state.city}&units=metric&appid=${API_KEY}`;\r\n\r\n      axios\r\n        .get(URL)\r\n        .then((response) => {\r\n          const { data } = response;\r\n          setCurrentWeather({\r\n            icon: data.weather[0].icon,\r\n            main: data.weather[0].main,\r\n            time: data.timezone,\r\n            mainTemp: Math.round(data.main.temp),\r\n            temp: {\r\n              min: Math.round(data.main.temp_min),\r\n              max: Math.round(data.main.temp_max),\r\n            },\r\n          });\r\n\r\n          setTimeout(() => {\r\n            keepCalling();\r\n          }, 1200000); // 20min\r\n        })\r\n        .catch(() => {});\r\n    };\r\n\r\n    keepCalling();\r\n  }, [state.city]);\r\n\r\n  /**\r\n   * Make API call\r\n   */\r\n  const makeCall = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${state.city}&units=metric&appid=${API_KEY}`;\r\n\r\n      axios\r\n        .get(URL)\r\n        .then((response) => {\r\n          const { data } = response;\r\n\r\n          // Check if we got a good response, which is 200\r\n\r\n          if (data.cod === \"200\") {\r\n            // Don't retry, everything is good\r\n\r\n            resolve(false);\r\n\r\n            const arr = data.list.filter((e) => {\r\n              const val = e.dt_txt.split(\" \")[1];\r\n              return val === \"00:00:00\" || val === \"12:00:00\";\r\n            });\r\n\r\n            // Sort data according matching days\r\n\r\n            const matching = [];\r\n\r\n            arr.forEach((value) => {\r\n              // take date\r\n              const date = value.dt_txt.split(\" \")[0];\r\n\r\n              if (matching[date]) {\r\n                matching[date].push(value);\r\n              } else {\r\n                matching[date] = [value];\r\n              }\r\n            });\r\n\r\n            // convert to proper array\r\n\r\n            let toArray = Object.entries(matching);\r\n            toArray = toArray.filter((e) => {\r\n              return e[1].length !== 1;\r\n            });\r\n\r\n            const finalData = [];\r\n\r\n            toArray.forEach((value) => {\r\n              const itemData = {};\r\n\r\n              value[1].forEach((itemValue) => {\r\n                const time = itemValue.dt_txt.split(\" \")[1];\r\n\r\n                const roundTemp = Math.round(itemValue.main.temp);\r\n\r\n                const dataCons = {\r\n                  temp: roundTemp,\r\n                  mainTemp: roundTemp,\r\n                  weather: itemValue.weather[0],\r\n                };\r\n\r\n                if (time === \"12:00:00\") {\r\n                  itemData[\"high\"] = dataCons;\r\n                } else {\r\n                  itemData[\"low\"] = dataCons;\r\n                }\r\n              });\r\n\r\n              finalData.push({\r\n                date: value[0],\r\n                data: itemData,\r\n              });\r\n            });\r\n\r\n            setWeather(finalData);\r\n          } else {\r\n            // Retry\r\n\r\n            resolve(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          // Retry\r\n\r\n          resolve(true);\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Exponetially delay re-try periods, until successful\r\n   *\r\n   * @param {Function} apiCaller - makes api call\r\n   * @param {number} delay - a deplay timer for re-retrying\r\n   */\r\n\r\n  const loopCall = useCallback(\r\n    async (apiCaller, delay) => {\r\n      const retry = await apiCaller().then((response) => {\r\n        return response;\r\n      });\r\n\r\n      if (retry) {\r\n        if (delay <= 16000) {\r\n          console.log(\"Next delay\", delay);\r\n\r\n          setShowRetry(true);\r\n\r\n          setRemainingTime(delay);\r\n\r\n          const timer = setTimeout(() => {\r\n            if (retrying) {\r\n              setRetrying(false);\r\n              clearTimeout(timer);\r\n            } else {\r\n              loopCall(apiCaller, delay * 2);\r\n            }\r\n          }, delay);\r\n        } else {\r\n          console.log(\"Just stop trying.\");\r\n          setError(true);\r\n          setShowRetry(false);\r\n          setRemainingTime(0);\r\n        }\r\n      } else {\r\n        setShowRetry(false);\r\n        setRemainingTime(0);\r\n      }\r\n    },\r\n    [retrying]\r\n  );\r\n\r\n  const onRetry = () => {\r\n    setRetrying(true);\r\n    setShowRetry(false);\r\n\r\n    makeCall().then((response) => {\r\n      return response;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loopCall(makeCall, 2000);\r\n  }, [loopCall]);\r\n\r\n  const onSearchSubmit = (city) => {\r\n    setState({ city });\r\n  };\r\n\r\n  const toCelsius = (fahrenheit) => {\r\n    return Math.round((fahrenheit - 32) * (5 / 9));\r\n  };\r\n\r\n  const toFahrenheit = (celsius) => {\r\n    return Math.round(celsius * (9 / 5) + 32);\r\n  };\r\n\r\n  const converter = (temp, type) => {\r\n    if (type !== \"celsius\") {\r\n      return toFahrenheit(temp);\r\n    }\r\n\r\n    return toCelsius(temp);\r\n  };\r\n\r\n  const onValueChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    let symbol = \"°C\";\r\n\r\n    if (value !== \"celsius\") {\r\n      symbol = \"°F\";\r\n    }\r\n    // const handlAlert =()=>{\r\n\r\n    // };\r\n    // const calcTime =()=>{\r\n      // let date = new Date();\r\n      // const localTime = date.getTime();\r\n      // const localOffset = date.getTimeZoneOffset() * 60000;\r\n      // const uct = localTime + localOffset;\r\n      // var remoteTime = uct + (1000 + currentWeather.timezone);\r\n      // console.log(remoteTime); \r\n    //  const timezone = currentWeather.time;\r\n    //  const timezoneInMinutes = timezone/60;\r\n    //  const currentTime; \r\n    // };\r\n\r\n    /**\r\n     * Convert current weather\r\n     * @var Object\r\n     */\r\n    const calCurrent = {\r\n      icon: currentWeather.icon,\r\n      main: currentWeather.main,\r\n      mainTemp: converter(currentWeather.mainTemp, value),\r\n      temp: {\r\n        min: converter(currentWeather.temp.min, value),\r\n        max: converter(currentWeather.temp.max, value),\r\n      },\r\n    };\r\n\r\n    setCurrentWeather(calCurrent);\r\n\r\n    /**\r\n     * Convert weather array data\r\n     * @var array\r\n     */\r\n\r\n    const changeWeather = weather.map((objValue) => {\r\n      const val = objValue;\r\n\r\n      if (val.data.high !== undefined) {\r\n        val.data.high.temp = converter(val.data.high.temp, value);\r\n      }\r\n\r\n      if (val.data.low !== undefined) {\r\n        val.data.low.temp = converter(val.data.low.temp, value);\r\n      }\r\n\r\n      return val;\r\n    });\r\n\r\n    setWeather(changeWeather);\r\n\r\n    setState({ ...state, tempSymbol: symbol, tempUnits: value });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"card\">\r\n      <SearchForm onSubmit={onSearchSubmit} />\r\n      <h1 className=\"main-card-header\">\r\n        Weekly weather forecast in {state.city}\r\n      </h1>\r\n      <div className=\"options-container\">\r\n        <label htmlFor=\"celsius\">\r\n          <input\r\n            onChange={onValueChange}\r\n            type=\"radio\"\r\n            id=\"celsius\"\r\n            checked={state.tempUnits === \"celsius\"}\r\n            value=\"celsius\"\r\n          />\r\n          <div>Celsius</div>\r\n        </label>\r\n        <label htmlFor=\"fahrenheit\">\r\n          <input\r\n            onChange={onValueChange}\r\n            type=\"radio\"\r\n            id=\"fahrenheit\"\r\n            checked={state.tempUnits === \"fahrenheit\"}\r\n            value=\"fahrenheit\"\r\n          />\r\n          <div>Fahrenheit</div>\r\n        </label>\r\n      </div>\r\n      <div className=\"currentWeather\">\r\n        <div className=\"main-info\">\r\n          <div className=\"temp-measurement\">{currentWeather.mainTemp}</div>\r\n          <div className=\"temp-unit\">\r\n            {state.tempUnits === \"celsius\" ? \"°C\" : \"°F\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"sub-info\">\r\n          <div className=\"sub-info-datatitle\">Current Weather Today</div>\r\n\r\n          <div className=\"sub-info-text\">{currentWeather.main}</div>\r\n\r\n          <div className=\"sub-info-text\">\r\n            <span className=\"max-temp\">\r\n              <i className=\"mdi mdi-arrow-up\" />\r\n              {`${currentWeather.temp.min} ${state.tempSymbol}`}\r\n            </span>\r\n            <span className=\"min-temp\">\r\n              <i className=\"mdi mdi-arrow-down\" />\r\n              {`${currentWeather.temp.max} ${state.tempSymbol}`}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <WeatherList\r\n        error={error && !showRetry}\r\n        weather={weather}\r\n        units={state.tempSymbol}\r\n      />\r\n      {showRetry && (\r\n        <div className=\"retry-container\">\r\n          <button className=\"retry-btn\" onClick={onRetry}>\r\n            Retry now\r\n          </button>\r\n          <div>{`Retrying in ${remainingTime / 1000} sec.`}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, {Component} from 'react';\nimport './App.css';\n// import axios from 'axios';\nimport WeatherCard from './components/WeatherCard';\nclass App extends Component{\n  render(){\n    return(\n      <div className =\"App\">\n      <WeatherCard />\n        \n      </div>\n    )\n  }\n  // componentDidMount(){\n  //   //load data \n  //   // API key 986df41cb8f0c0e4760d17130fc344d7\n  //   axios.get(\"api.openweathermap.org/data/2.5/weather?q={city name}&appid={986df41cb8f0c0e4760d17130fc344d7}\").then(response =>{\n  //     console.log(response);\n  //   })\n  //   // set state with that data\n  // }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}